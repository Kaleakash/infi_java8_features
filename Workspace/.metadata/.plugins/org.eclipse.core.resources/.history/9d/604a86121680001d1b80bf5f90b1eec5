package com;
@FunctionalInterface
interface Sample {
	void display();
	//void display2();
}
//1st approach 
class SampleImp implements Sample {
	@Override
	public void display() {
		System.out.println("SampleImp providing body for display method");
	}
//	@Override
//	public void display2() {
//		System.out.println("SampleImp provided body for display2 method");
//		
//	}
}
public class LambdaExpressionExample {
	public static void main(String[] args) {
		//1st approach 
		Sample s1 = new SampleImp();
		s1.display();
		
		//2nd approach Anonymous inner class
		Sample s2 = new Sample() {
			@Override
			public void display() {
				System.out.println("Providing the body for Sample interface using anonymous inner class");
			}
//			@Override
//			public void display2() {
//				System.out.println("Anonyouse provided body for display2 method");
//				
//			}
		};
		s2.display();
		
		
		Sample s3 = new Sample() {
			@Override
			public void display() {
				System.out.println("Providing the body for Sample interface using anonymous inner class with different imp");
			}
//			@Override
//			public void display2() {
//				System.out.println("Anonyouse provided body for display2 method with different imp");
//				
//			}
		};
		s3.display();
		
		//3rd approach 
		Sample s4 = ()->System.out.println("This is simple lamda expressio example");
	}
}
