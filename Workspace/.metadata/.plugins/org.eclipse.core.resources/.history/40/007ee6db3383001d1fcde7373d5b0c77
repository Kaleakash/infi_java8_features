package com;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class StreamIntermediateAndTerminalOperators {
	public static void main(String[] args) {
		List<String> ll = new ArrayList<String>();
		ll.add("Ravi");ll.add("Ajay");ll.add("Vijay");ll.add("Reeta");ll.add("Mahesh");
		ll.add("Ramesh");ll.add("Raju");ll.add("Lokesh");ll.add("Ram");ll.add("Rai");
		ll.add("Ravi"); ll.add("Ramesh");
		// converting list to stream and use intermediate operator and then terminal operator 
		// map is intermediate operator or function 
		//ll.stream().map(v->v.toLowerCase()).forEach(v->System.out.print(v+" "));
		//mapToInt
		//ll.stream().mapToInt(v->v.length()).forEach(l->System.out.println("Each name length "+l));
		
		// filter : intermediate operator 
		
		//ll.stream().filter(v->v.startsWith("R")).forEach(e->System.out.print(" "+e));
		//ll.stream().filter(v->v.contains("e")).forEach(e->System.out.print(" "+e));
		
		// filter with map 
		//ll.stream().filter(v->v.contains("e")).map(e->e.toUpperCase()).forEach(e->System.out.print(" "+e));
		//ll.stream().mapToInt(v->v.length()).filter(v->v>5).forEach(e->System.out.print(" "+e));
		
//		boolean res1 = ll.stream().allMatch(v->v.contains("a"));
//		System.out.println(res1);
		
//		boolean res1 = ll.stream().anyMatch(v->v.contains("a"));
//		System.out.println(res1);
		
//		boolean res1 = ll.stream().map(v->v.toLowerCase()).anyMatch(v->v.startsWith("r"));
//		System.out.println(res1);
		
		// distinct 
		
		//ll.stream().distinct().forEach(v->System.out.print(v+" "));
		
		// collect() : this function use to convert stream to collection 
		System.out.println(ll.size());
		System.out.println(ll);
		//List<String> ll1 = ll.stream().collect(Collectors.toList());
		//List<String> ll1 = ll.stream().distinct().collect(Collectors.toList());
		List<String> ll1 = ll.stream().map(v->v.toUpperCase()).collect(Collectors.toList());
		System.out.println(ll1.size());
		System.out.println(ll1);
	}
}
